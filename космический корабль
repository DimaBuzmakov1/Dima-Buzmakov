
// CProgramDlg.cpp: файл реализации
//

#include "stdafx.h"
#include "CProgram.h"
#include "CProgramDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// Диалоговое окно CProgramDlg



CProgramDlg::CProgramDlg(CWnd* pParent /*=nullptr*/)
	: CDialog(IDD_CPROGRAM_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CProgramDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CProgramDlg, CDialog)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
END_MESSAGE_MAP()


// Обработчики сообщений CProgramDlg

BOOL CProgramDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Задает значок для этого диалогового окна.  Среда делает это автоматически,
	//  если главное окно приложения не является диалоговым
	SetIcon(m_hIcon, TRUE);			// Крупный значок
	SetIcon(m_hIcon, FALSE);		// Мелкий значок

	// TODO: добавьте дополнительную инициализацию

	return TRUE;  // возврат значения TRUE, если фокус не передан элементу управления
}

// При добавлении кнопки свертывания в диалоговое окно нужно воспользоваться приведенным ниже кодом,
//  чтобы нарисовать значок.  Для приложений MFC, использующих модель документов или представлений,
//  это автоматически выполняется рабочей областью.
void CProgramDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // контекст устройства для рисования

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// Значок центра в прямоугольнике клиента
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Нарисуй иконку
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{

		CClientDC dc(this);
		GetClientRect(&rc);

		cf = RGB(0, 0, 0);
		hPenOxy = CreatePen(PS_SOLID, 4, cf);
		hOldPen = (HPEN)SelectObject(dc, hPenOxy);

		dc.FillSolidRect(&rc, RGB(255, 255, 255));

		RH = abs(rc.left - rc.right);
		RW = abs(rc.top - rc.bottom);

		cx = RH / 2;
		cy = RW / 2;

		dx = cx / 10;
		dy = cy / 4;

		x1 = w.left = cx;
		y1 = w.top = cy - 4 * dy;

		for (y1 = y1 + 400; y1 >= -700; y1 -= 50)
		{
			Sleep(mtime - 100);
			dc.FillSolidRect(&rc, RGB(255, 255, 255));
			x2 = w.right = x1;
			y2 = w.bottom = y1 + 8 * dy;

			// Корпус ракеты
			CorpusSpaceShip(x1, y1, x2, y2, dx, dy);

			// Окошки
			ElluminateSpaceShip(x1, y1, dx, dy);

			// Крылья ракеты 
			EquipmentSpaceShip(x1, y1, x2, y2, dx, dy );
		}

		SelectObject(dc, hOldPen);
		DeleteObject(hPenOxy);


		CDialog::OnPaint();
	}
}

// Система вызывает эту функцию, чтобы получить курсор для отображения, пока пользователь перетаскивает
//  свернутое окно.
HCURSOR CProgramDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CProgramDlg::CorpusSpaceShip(int X1, int Y1, int X2, int Y2, int DX, int DY)
{
	CClientDC dc(this);
	GetClientRect(&rc);

	cf = RGB(0, 0, 0);
	hPenOxy = CreatePen(PS_SOLID, 4, cf);
	hOldPen = (HPEN)SelectObject(dc, hPenOxy);

	dc.MoveTo(X1, Y1);
	dc.LineTo(X1 + DX, Y1 + 3 * DY);
	dc.LineTo(X1 + DX, Y1 + 8 * DY);
	dc.LineTo(X2, Y2);

	dc.MoveTo(X1, Y1);
	dc.LineTo(X1 - DX, Y1 + 3 * DY);
	dc.LineTo(X1 - DX, Y1 + 8 * DY);
	dc.LineTo(X2, Y2);

	SelectObject(dc, hOldPen);
	DeleteObject(hPenOxy);

}

void CProgramDlg::ElluminateSpaceShip(int X1, int Y1, int DX, int DY)
{
	CClientDC dc(this);
	GetClientRect(&rc);

	cf = RGB(0, 0, 0);
	hPenOxy = CreatePen(PS_SOLID, 4, cf);
	hOldPen = (HPEN)SelectObject(dc, hPenOxy);

	int r1;

	r1 = DX / 3;
	int x = X1;
	int y = Y1 + 4.5*DY;
	dc.Ellipse(x - r1, y - r1, x + r1, y + r1);
	y = y - 1.25*DY;
	dc.Ellipse(x - r1, y - r1, x + r1, y + r1);

	SelectObject(dc, hOldPen);
	DeleteObject(hPenOxy);

}


void CProgramDlg::EquipmentSpaceShip(int X1, int Y1, int X2, int Y2, int DX, int DY)
{
	CClientDC dc(this);
	GetClientRect(&rc);

	cf = RGB(0, 0, 0);
	hPenOxy = CreatePen(PS_SOLID, 4, cf);
	hOldPen = (HPEN)SelectObject(dc, hPenOxy);

	dc.MoveTo(X1 + DX, Y1 + 5 * DY);
	dc.LineTo(X1 + 2 * DX, Y1 + 6.5*DY);
	dc.LineTo(X1 + 2 * DX, Y1 + 9 * DY);
	dc.LineTo(X1 + 1.5*DX, Y1 + 9 * DY);
	dc.LineTo(X1 + DX, Y1 + 8 * DY);

	dc.MoveTo(X1 - DX, Y1 + 5 * DY);
	dc.LineTo(X1 - 2 * DX, Y1 + 6.5*DY);
	dc.LineTo(X1 - 2 * DX, Y1 + 9 * DY);
	dc.LineTo(X1 - 1.5*DX, Y1 + 9 * DY);
	dc.LineTo(X1 - DX, Y1 + 8 * DY);

	dc.MoveTo(X1, Y1 + 5.25 * DY);
	dc.LineTo(X2, Y2 + DY);

	SelectObject(dc, hOldPen);
	DeleteObject(hPenOxy);


}


